/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    services: Service;
    about: About;
    mission: Mission;
    vision: Vision;
    story: Story;
    team: Team;
    servicedetails: Servicedetail;
    projects: Project;
    projectdetails: Projectdetail;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    services: ServicesSelect<false> | ServicesSelect<true>;
    about: AboutSelect<false> | AboutSelect<true>;
    mission: MissionSelect<false> | MissionSelect<true>;
    vision: VisionSelect<false> | VisionSelect<true>;
    story: StorySelect<false> | StorySelect<true>;
    team: TeamSelect<false> | TeamSelect<true>;
    servicedetails: ServicedetailsSelect<false> | ServicedetailsSelect<true>;
    projects: ProjectsSelect<false> | ProjectsSelect<true>;
    projectdetails: ProjectdetailsSelect<false> | ProjectdetailsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services".
 */
export interface Service {
  id: string;
  /**
   * The title of the service (e.g., Software Development).
   */
  title: string;
  /**
   * Unique identifier for the service (e.g., software-development).
   */
  slug: string;
  /**
   * Brief description of the service for the services list.
   */
  description: string;
  /**
   * Icon for the service, displayed in the services list.
   */
  icon: string | Media;
  /**
   * Optional rich text content for the service.
   */
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about".
 */
export interface About {
  id: string;
  title: string;
  subtitle: string;
  description: string;
  images?:
    | {
        image: string | Media;
        id?: string | null;
      }[]
    | null;
  experienceYears: number;
  progressBars?:
    | {
        title: string;
        percentage: number;
        id?: string | null;
      }[]
    | null;
  sliderLogos?:
    | {
        image: string | Media;
        id?: string | null;
      }[]
    | null;
  cta: {
    title: string;
    description: string;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mission".
 */
export interface Mission {
  id: string;
  title: string;
  subtitle: string;
  description: string;
  images?:
    | {
        image: string | Media;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "vision".
 */
export interface Vision {
  id: string;
  title: string;
  subtitle: string;
  description: string;
  images?:
    | {
        image: string | Media;
        id?: string | null;
      }[]
    | null;
  items?:
    | {
        title: string;
        description: string;
        icon: string | Media;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "story".
 */
export interface Story {
  id: string;
  title: string;
  subtitle: string;
  year: string;
  tabTitle: string;
  description?:
    | {
        label: string;
        text: string;
        id?: string | null;
      }[]
    | null;
  image: string | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "team".
 */
export interface Team {
  id: string;
  name: string;
  role: string;
  image: string | Media;
  socialLinks?:
    | {
        url: string;
        icon: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Collection for service details, including title, description, image, approach, and technologies.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "servicedetails".
 */
export interface Servicedetail {
  id: string;
  /**
   * Reference to the corresponding service in the Services collection.
   */
  serviceId: string | Service;
  /**
   * The title of the service (e.g., Software Development).
   */
  title: string;
  /**
   * Unique identifier for the service (e.g., software-development).
   */
  slug: string;
  /**
   * Main description of the service, displayed in the first article.
   */
  description: string;
  /**
   * Main image for the service, displayed at the top of the service details.
   */
  image?: (string | null) | Media;
  /**
   * Text describing the approach for the service.
   */
  approach?: string | null;
  /**
   * Text for the Custom Development section.
   */
  customDevelopment?: string | null;
  /**
   * Text for the Development Services section.
   */
  developmentServices?: string | null;
  /**
   * Text describing applications.
   */
  applications?: string | null;
  /**
   * List of technologies used in the service.
   */
  technologies?:
    | {
        /**
         * Technology category (e.g., Frontend, Backend).
         */
        category: string;
        /**
         * List of tools (e.g., HTML, CSS, JavaScript).
         */
        tools: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: string;
  /**
   * The title of the project (e.g., Enterprise Resource Planning Implementation).
   */
  title: string;
  /**
   * Unique identifier for the project (e.g., erp-implementation).
   */
  slug: string;
  /**
   * Brief description of the project for the projects list.
   */
  description: string;
  /**
   * Image for the project, displayed in the projects list.
   */
  image: string | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * Collection for project details, including title, description, and image.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projectdetails".
 */
export interface Projectdetail {
  id: string;
  /**
   * Reference to the corresponding project in the Projects collection.
   */
  projectId: string | Project;
  title: string;
  slug: string;
  description: string;
  image?: (string | null) | Media;
  implementationProcess?:
    | {
        step: string;
        id?: string | null;
      }[]
    | null;
  benefits?:
    | {
        title: string;
        description: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'services';
        value: string | Service;
      } | null)
    | ({
        relationTo: 'about';
        value: string | About;
      } | null)
    | ({
        relationTo: 'mission';
        value: string | Mission;
      } | null)
    | ({
        relationTo: 'vision';
        value: string | Vision;
      } | null)
    | ({
        relationTo: 'story';
        value: string | Story;
      } | null)
    | ({
        relationTo: 'team';
        value: string | Team;
      } | null)
    | ({
        relationTo: 'servicedetails';
        value: string | Servicedetail;
      } | null)
    | ({
        relationTo: 'projects';
        value: string | Project;
      } | null)
    | ({
        relationTo: 'projectdetails';
        value: string | Projectdetail;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services_select".
 */
export interface ServicesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  description?: T;
  icon?: T;
  content?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about_select".
 */
export interface AboutSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  description?: T;
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  experienceYears?: T;
  progressBars?:
    | T
    | {
        title?: T;
        percentage?: T;
        id?: T;
      };
  sliderLogos?:
    | T
    | {
        image?: T;
        id?: T;
      };
  cta?:
    | T
    | {
        title?: T;
        description?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mission_select".
 */
export interface MissionSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  description?: T;
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "vision_select".
 */
export interface VisionSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  description?: T;
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  items?:
    | T
    | {
        title?: T;
        description?: T;
        icon?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "story_select".
 */
export interface StorySelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  year?: T;
  tabTitle?: T;
  description?:
    | T
    | {
        label?: T;
        text?: T;
        id?: T;
      };
  image?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "team_select".
 */
export interface TeamSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  image?: T;
  socialLinks?:
    | T
    | {
        url?: T;
        icon?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "servicedetails_select".
 */
export interface ServicedetailsSelect<T extends boolean = true> {
  serviceId?: T;
  title?: T;
  slug?: T;
  description?: T;
  image?: T;
  approach?: T;
  customDevelopment?: T;
  developmentServices?: T;
  applications?: T;
  technologies?:
    | T
    | {
        category?: T;
        tools?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects_select".
 */
export interface ProjectsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  description?: T;
  image?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projectdetails_select".
 */
export interface ProjectdetailsSelect<T extends boolean = true> {
  projectId?: T;
  title?: T;
  slug?: T;
  description?: T;
  image?: T;
  implementationProcess?:
    | T
    | {
        step?: T;
        id?: T;
      };
  benefits?:
    | T
    | {
        title?: T;
        description?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}